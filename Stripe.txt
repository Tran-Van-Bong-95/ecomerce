// Stripe Elements 
React Stripe.js thì đơn giản là 1 wrapper nhẹ bao quanh Stripe Elements,
cái là 1 UI components được xây dựng sẵn cho phép developers thực hiện 
hoạt động thanh toán 1 cách an toàn trong their applications 1 cách nhanh 
chóng và dễ dàng. 
1 trong những element đó là Card Element, là 1 dạng dòng đơn cái thu thập 
tất cả thông tin được yêu cầu để thực hiện thanh toán online sử dụng 1 debit
hay credit card

Developers can also build their own custom payment forms using elements
that represent the individual parts of the Card Element: the Card Number
Element, the Card Expiry Element, and so on. You can learn more about
Stripe Elements here.


// React Stripe.js 
In React Stripe.js, Elements are available in the form of React components,
so for each Element, we have a corresponding React component. Besides 
the Element components, React Stripe.js also contains some Hooks and other 
components, like the Elements provider and ElementsConsumer.

// The Elements provider
The Elements provider is a component that allows any components nested in
it to use the Element components and the Hooks provided by React Stripe.js.
Elements has two props: stripe and options. Normally, stripe takes in a Stripe
object or a promise that resolves to a Stripe object. To initialize a Stripe object,
you can use the loadStripe function from the stripe-js module.

import React from "react";
import { loadStripe } from "@stripe/stripe-js";
import { Elements } from "@stripe/react-stripe-js";

const stripe = loadStripe(
  "{PUBLIC-KEY}"
);
const App = () => {
  return (
    <Elements stripe={stripe}>
      ...
    </Elements>
  );
};


// The useStripe and useElements Hooks
The useStripe and useElements Hooks are the two React Hooks that React Stripe.js offers. 
useStripe returns a reference to the Stripe object instance we initially passed to the Elements provider. 
With this Stripe object, we can interact with Stripe. useElements returns an Elements object, 
which we can use for interacting with our Elements and collecting sensitive for payment.


// Accepting payments 
Trong App component của chúng ta, chúng ta sẽ khởi tạo our Stripe object bằng cách sử dụng 
loadStripe function. Chúng ta sau đó sẽ truyền this instance tới stripe prop của Element provider

Để làm điều này, chúng ta sẽ cần 1 published key, cái mà chúng ta tìm trong Stripe dashboard của 
chúng ta khi mà bạn tạo ra 1 account. 

Khi mà our Elements provider sẵn sàng, chúng ta sẽ tạo ra 1 new component cho our checkout form.
Từ checkout component đó chúng ta sẽ chấp nhận the user's card details

Chúng ta sẽ sử dụng CardElement component để thu thập 1 cách an toàn 
the user's card details và truyền nó tới Stripe để xử lý. 

The CardElement component doesn't create or store PaymentIntents.
All it does is collect card details which are then used to confirm PaymentIntents. 


function CheckoutForm() {
  const [isPaymentLoading, setPaymentLoading] = useState(false);
  return (
    <div
      style={{
        padding: "3rem",
      }}
    >
      <div
        style={{
          maxWidth: "500px",
          margin: "0 auto",
        }}
      >
        <form
          style={{
            display: "block",
            width: "100%",
          }}
        >
          <div
            style={{
              display: "flex",
              flexDirection: "column",
              alignItems: "center",
            }}
          >
            <CardElement
              className="card"
              options={{
                style: {
                  base: {
                    backgroundColor: "white"
                  } 
                },
              }}
            />
            <button
              className="pay-button"
              disabled={isPaymentLoading}
            >
              {isPaymentLoading ? "Loading..." : "Pay"}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

Khi mà người dùng nhập các thông tin cần thiết chúng ta sẽ tạo ra 1 hàm dùng cho 
việc thu thập các thông tin đó, chúng ta sẽ khoá thông tin đó với 1 secret key 
và gửi chúng tới Stripe for payment. 

Để làm điều đó chúng ta sẽ tạo 1 request tới an endpoint on our server
để nhận được client secret, cái chúng ta sẽ sử dụng để make the payment

Ta dùng client secret để make the payment 

React Stripe Elements doesn't create a PaymentIntent either.
PaymentIntents can only be created on the server with a secret API key.
What you save to your database depends on what information you're interested in. 

a request is made to your server to create a PaymentIntent and 
the client secret is returned. Then the PaymentIntent is confirmed with
the client secret.


Sau đó chúng ta sẽ sử dụng useStripe và useElement hooks để nhận the stripe
và element instance, từ đó chúng ta sẽ sử dụng cho việc making payment thông qua 
confirmCardPayment method. 
Hàm này sẽ lấy our client secret và 1 object chỉ định thêm thông tin về user's payment 
const stripe = useStripe();
const elements = useElements();

const paymentResult = await stripe.confirmCardPayment(clientSecret, {
      payment_method: {
        card: elements.getElement(CardElement),
        billing_details: {
          name: "Faruq Yusuff",
        },
      },
});


As you can see, We can also specify other details about this payment using the billing_details property.

our payMoney function is complete.
const payMoney = async (e) => {
    e.preventDefault();
    const clientSecret = getClientSecret();
    const paymentResult = await stripe.confirmCardPayment(clientSecret, {
      payment_method: {
        card: elements.getElement(CardElement),
        billing_details: {
          name: "Yusuff Faruq",
        },
      },
    });
    setPaymentLoading(false);
    if (paymentResult.error) {
      alert(paymentResult.error.message);
      console.log(paymentResult.error.message);
    } else {
      if (paymentResult.paymentIntent.status === "succeeded") {
        alert("Success!");
        console.log(paymentResult);
      }
    }
  };


	------------------------------------------------------------
Install Stripe React libraries
Before we get started let’s install the Stripe JS libraries onto your React application.

npm install @stripe/react-stripe-js @stripe/stripe-js


@stripe/stripe-js – installs the core JavaScript utilities to make API calls to Stripe servers.
You can learn more about their stripe-js SDK here, “Stripe JavaScript SDK documentation“.


@stripe/react-stripe-js – is a set of pre-built UI components to be able to make custom payment 
forms in your React app.

Each Stripe React components is mounted in a iframe element under the hood
This is done for security reasons.


// Stripe React library core components

Now that the Stripe Javascript libraries have been installed, let's go over
the core component that will be used 

1. Elements component 
The 'Elements component' allows you to access the Stripe Javascript object 
that is coming from '@stripe/stripe-js'

Any payment form component must nested inside Elements

Stripe Elements component
<Elements stripe = {stripePromise}>
	<StripeForm/>
</Elements>

In the example above you may see a Javascript variable called stripePromise 
being passed as a prop to the Elements component. I'll go over that variable in step 1 of this guide
You want to make sure to pass those objects down as props to your custom payment form component 

2. CardElement component 
The CardElement component renders the UI for the card number, date expiratioin, CVC code, and the 
billing zip code fields (các trường mã zip thanh toán)


Step1: Load Stripe object 
The first step to adding a payment form to your React app is to load the Stripe object.

First we start by importing the loadStripe utility function.
import { loadStripe } from "@stripe/stripe-js"

loadStripe() is a function that returns a JavaScript promise.

It requires a string argument. That string value should be your publishable API key

const stripePromise = loadStripe('<pulishable_api_key>')

To access your publishable key, you can go to your API keys dashboard in Stripe.
I highly recommend that you don’t hard code your key in your project.
Even though the publishable key is safe to be viewed in the publics eye; try storing it as an environment variable.


Step2: Add the Elements provider component 
After you’ve initiated the loadStripe() call. 
Now you need to attach stripePromise to the prop attribute, stripe, 
found in the Elements provider component.


import {
  Elements,
  CardElement,
} from "@stripe/react-stripe-js";

class StripePaymentForm extends React.Component {
  render() {
    return (
      <Elements stripe={stripePromise}>
	<PaymentForm />
      </Elements>
    );
  }
}


Step3: Create payment form with Stripe CardElement 
The next step is to create another React component that will render 
the payment form fields that uses the CardElement component 

We will use the hook utilities that Stripe provides to get Stripe API object and
the element object

import {
  Elements,
  CardElement,
  useElements,
  useStripe
} from "@stripe/react-stripe-js";

const PaymentForm = () => {
  const stripe = useStripe();
  const elements = useElements();

  return (
    <>
      <h1>stripe form</h1>
      <CardElement />
      <button onClick={handleSubmit(stripe, elements)}>Buy</button>
    </>
  );
}

useStripe() is a hook that allows a functional component to access the Stripe object.
useElements() is a hook that allows the developer to access the mounted Elements.
in this case is mounted Elements

Step4: Confirm card payment
Mục tiêu ở đây là lấy các trường từ các phần tử Stripe UI và tạo đối tượng 
biểu mẫu thanh toán có thể được chuyển một cách an toàn đến API máy chủ để xử 
lý phần mục đích thanh toán.

The objective here is to get the fields from the Stripe UI elements and create a 
payment form object that can be safely passed to a server API to process the payment
intent portion 


const handleSubmit = (stripe, elements) => async () => {
const cardElement = elements.getElement(CardElement);

  const {error, paymentMethod} = await stripe.createPaymentMethod({
    type: 'card',
    card: cardElement,
  });

  if (error) {
    console.log('[error]', error);
  } else {
    console.log('[PaymentMethod]', paymentMethod);
     // ... POST: /api/charge/user  
  }
}

// phân tích code 
// Code breakdown 
The first step in handler function, handleSubmit, is to get the reference card elements.
const cardElement = elements.getElement(CardElement);


The next step is to call stripe.createPaymentMethod() to create a payment information object that can be safely passed to a server API.
const {error, paymentMethod} = await stripe.createPaymentMethod({
  type: 'card',
  card: cardElement,
});

an example of a payment information object given from Stripe payment API:


{
  "id": "pm_1Ht3jfCqiD4E1v5r3l3m0kNG",
  "object": "payment_method",
  "billing_details": {
    "address": {
      "city": "Anytown",
      "country": "US",
      "line1": "1234 Main street",
      "line2": null,
      "postal_code": "123456",
      "state": null
    },
    "email": "jenny@example.com",
    "name": null,
    "phone": "+15555555555"
  },
  "card": {
    "brand": "visa",
    "checks": {
      "address_line1_check": null,
      "address_postal_code_check": null,
      "cvc_check": "pass"
    },
    "country": "US",
    "exp_month": 8,
    "exp_year": 2021,
    "fingerprint": "rHDKgLHVDcTqIKV7",
    "funding": "credit",
    "generated_from": null,
    "last4": "4242",
    "networks": {
      "available": [
        "visa"
      ],
      "preferred": null
    },
    "three_d_secure_usage": {
      "supported": true
    },
    "wallet": null
  },
  "created": 123456789,
  "customer": null,
  "livemode": false,
  "metadata": {
    "order_id": "123456789"
  },
  "type": "card"
}

The response above is safe to pass to your API server and process the payment intent portion 
(Phản hồi ở trên thì an toàn để truyền API server và tiến hành xử lý the payment intent portion )

import {
  Elements,
  CardElement,
  useElements,
  useStripe
} from "@stripe/react-stripe-js";
import { loadStripe } from "@stripe/stripe-js";

const stripePromise = loadStripe("pk_test_JJ1eMdKN0Hp4UFJ6kWXWO4ix00jtXzq5XG");

const handleSubmit = (stripe, elements) => async () => {
  const cardElement = elements.getElement(CardElement);

  const {error, paymentMethod} = await stripe.createPaymentMethod({
    type: 'card',
    card: cardElement,
  });

  if (error) {
    console.log('[error]', error);
  } else {
    console.log('[PaymentMethod]', paymentMethod);
    // ... SEND to your API server to process payment intent
  }
};

const PaymentForm = () => {
  const stripe = useStripe();
  const elements = useElements();
  return (
    <>
      <h1>stripe form</h1>
      <CardElement />
      <button onClick={handleSubmit(stripe, elements)}>Buy</button>
    </>
  );
}

const StripePaymentForm  = () => (
  <Elements stripe={stripePromise}>
    <PaymentForm />
  </Elements>
);
